stop_headsign = c(NA, data$stop_headsign, NA),
distance_km = distance_vec,
block_length_km = max(distance_vec),
time_axis = time_vec,
direction = c(NA, data$direction_id, NA),
type = c('dead leg', data$type, 'dead leg')
)
# Count trips made using run length encoding function
trips_made <- rle(data_plot_add$trip_id)$values
# Remove NAs which will be the depot trips
trips_made <- trips_made[!is.na(trips_made)]
# Now summarize the bock as a single row
data_summary_add <- data.frame(
route_id = route,
service_id = service,
block = block,
num_trips = length(trips_made),
depot_start_time = format(head(time_vec, 1), format = "%H:%M:%S"),
trips_start_time = head(data$departure_time, 1),
trips_end_time = tail(data$arrival_time, 1),
depot_end_time = format(tail(time_vec, 1), format = "%H:%M:%S"),
start_depot = DEFAULT_DEPOT,
start_stop_id = head(data$stop_id, 1),
start_stop_name = stop_names$stop_name[stop_names$stop_id == head(data$stop_id, 1)],
last_stop_id = tail(data$stop_id, 1),
last_stop_name = stop_names$stop_name[stop_names$stop_id == tail(data$stop_id, 1)],
end_depot = DEFAULT_DEPOT,
block_length_km = round(max(distance_vec), 3)
)
# Now add stop names
data_plot_add <- data_plot_add %>%
left_join(stop_names, by = c('stop' = 'stop_id'))
# Add depot name as stop name for start and end
data_plot_add$stop_name[c(1, nrow(data_plot_add))] <- DEFAULT_DEPOT
# Bind with previous & move to next
data_plot <- rbind(data_plot, data_plot_add)
data_summary <- rbind(data_summary, data_summary_add)
}
}
}
mode <- ifelse(ind == 0, TRUE, FALSE)
# Save the plot_out data frame to the Azure SQL db
print('Saving data to database...')
saveByChunk(
chunk_size = 5000,
dat = data_plot,
table_name = 'distances',
connection_pool = conPool,
replace = mode
)
if(ind == 0) ind <- ind + 1
slice[1] <- 241
slice[2] <- 272
slice
print(paste0('Processing slice ', slice[1], ' to ', slice[2]))
routesVectorSlice <- routesVector[slice[1]:slice[2]]
data_plot <- data.frame()
for (route in routesVectorSlice){
print(paste0('Route ', which(routesVector %in% route), ' of ', length(routesVector)))
# Trips
tripsData <- getDbData(paste0("SELECT trip_id, service_id FROM trips WHERE route_id = '", route, "'"), conPool)
# Loop through for each service id
serviceVector <- unique(tripsData$service_id)
for (service in serviceVector){
print(paste0('Service ', which(serviceVector %in% service), ' of ', length(serviceVector)))
# Stops
query <- paste0("SELECT t.route_id, t.trip_id, t.service_id, s.arrival_time, s.departure_time,
s.stop_id, s.stop_headsign, s.shape_dist_traveled, t.direction_id
FROM trips t LEFT JOIN stop_times s ON t.trip_id = s.trip_id WHERE t.trip_id IN (",
paste0(sprintf("'%s'", unique(tripsData$trip_id)), collapse = ', '), ") AND t.service_id = '", service, "'")
stops <- getDbData(query, conPool) %>% arrange(trip_id)
if(nrow(stops) != 0){
# Ensure that trips are ordered correctly wrt to time
# some can be reversed, use run length encoding with rep function
run <- rle(stops$trip_id)
stops$trip_id_iter <- rep(sequence(length(run$values)), run$lengths)
stops <- stops %>%
mutate(departure_secs = toSeconds(departure_time)) %>%
arrange(trip_id_iter, departure_secs)
# Create quasi block number data based on departure time diffs
stops$quasi_block <- c(0, diff(toSeconds(stops$departure_time)))
# If diff is negative, it is not possible for the same bus to complete
# the trip, hence block assumed to terminate
stops$quasi_block <- ifelse(stops$quasi_block < 0, 1, 0)
bounds <- length(stops$quasi_block[stops$quasi_block == 1])
stops$quasi_block[stops$quasi_block == 1] <- (2:(bounds + 1))
stops$quasi_block[1] <- 1
# Now that block bounds have been identified, NA the infill values so
# that we can use the na last obs carry forward function to fill with
# the appropriate block number
stops$quasi_block <- ifelse(stops$quasi_block == 0, NA, stops$quasi_block)
stops$quasi_block <- zoo::na.locf(stops$quasi_block)
}
blockVector <- sort(unique(stops$quasi_block))
for (block in blockVector){
print(paste0('Block ', which(blockVector %in% block), ' of ', length(blockVector)))
# Blocks
data <- stops %>% filter(quasi_block == block)
# Prep data for time and distance modifications
# Some times could be greater than 24 hrs, e.g., 25:10:30
# Only times are provided, but days are required for (easier) plotting
# We need to add dead leg & trip distances to route distances & re-calc cumulative distance
data <- data %>%
mutate(time_secs = toSeconds(departure_time)) %>%
mutate(distance = shape_dist_traveled) %>%
mutate(time_axis = departure_time)
# Handling for times greater than 24 hrs, e.g., 28:30:00
# Start by giving all days a flag of 1 (first day)
data$day_flag <- 1
# Use regular expression to identify locations of times greater than 24 hr
high_times_loc <- grepl("^[2-9][4-9]:", data$departure_time)
# If there are times greater than 24 hrs, assign a new day flag, e.g., 2, 3, 4, n days
if (sum(high_times_loc) != 0){
high_times <- data$departure_time[high_times_loc]
high_times_hrs <- as.integer(substr(high_times, 1, 2))
day_count <- ceiling(max(high_times_hrs)) # round up to nearest day
# Iterate & add day flags
for (days in sequence(day_count)){
data$day_flag[data$time_secs > (days * 24 * 60 * 60)] <- (days + 1) # change flag for days greater than days x 24 hrs
}
}
# Now that day flags/markers are in place, we can re-base the hours
# e.g., convert 24:30:30 to 00:30:30
# Use regular expression to select & modify times/hrs greater than 24
mod_times <- c()
for (time in data$departure_time[grepl("^2[4-9]:", data$departure_time)]){
hr <- as.integer(substr(time, 1, 2))
hr <- hr - 24 # Rebase to 00
mod_times <- append(mod_times, gsub("^2[4-9]:", paste0(sprintf("%02d", hr), ':'), time))
}
# Now apply replace old times with mod times
data$departure_time[grepl("^2[4-9]:", data$departure_time)] <- mod_times
# Convert times to dummy day-time format for plot visualization
data <- data %>%
mutate(
time_axis = as.POSIXct(
paste0('2021-01-0', day_flag, ' ', departure_time),
format = "%Y-%m-%d %H:%M:%S", tz = 'UTC'
)
)
# Distances are cumulative, so get diff so we can calc a new
# cumulative distance that includes dead trip & leg distances
data$distance <- c(0, diff(data$distance))
# This will produce negative values at trip edges, put this to zero
data$distance[data$distance < 0] <- 0
# Create a file called type for easier filtering of data between route,
# dead trip & dead leg
data$type <- 'route'
# Grab stop analysis output
stop_analysis <- stop_analysis_out %>%
filter(route_id == route & service_id == service)
# Get dead trip details for selected route, service & block
deads <- stop_analysis %>%
filter(quasi_block == block) %>%
mutate(dead_trip_id = as.integer(dead_trip_id)) %>%
mutate(dead_trip_unique_id = as.integer(dead_trip_unique_id))
if (nrow(deads) != 0){
query <- paste0("SELECT DISTINCT dead_trip_unique_id, distance_km, time_hrs FROM dead_trip_shapes WHERE dead_trip_unique_id IN (",
paste0(sprintf("'%s'", unique(deads$dead_trip_unique_id)), collapse = ', '), ")")
dead_routes <- getDbData(query, conPool) %>% mutate(dead_trip_unique_id = as.integer(dead_trip_unique_id))
# Calculate the distance stats & join with stop analysis data for
# dead_start time so indices where dead route distances can be derived
dead_routes_stats <- dead_routes %>%
select(dead_trip_unique_id, distance_km, time_hrs) %>%
unique() %>%
left_join(deads, by = 'dead_trip_unique_id') %>%
select(dead_trip_unique_id, trip_first_stop_id, trip_last_stop_id, dead_start, distance_km, time_hrs, dead_time_hrs) %>%
# Ensure time order is correct for later insertion by index
mutate(dead_start_secs = toSeconds(dead_start)) %>%
arrange(dead_start_secs) %>%
select(-dead_start_secs)
# Now we need to add in the dead trip distances to our distance data
# Add 1 to indices as distance travelled is at available at the end of the trip
inds <- which(data$arrival_time %in% dead_routes_stats$dead_start) + 1
data$distance[inds] <- (dead_routes_stats$distance_km * 1000) # Convert from km to m for consistency
# Warning messages:
# 1: In data$distance[inds] <- (dead_routes_stats$distance_km * 1000) :
# number of items to replace is not a multiple of replacement length
# Tag as dead trips
data$type[inds] <- 'dead trip'
}
# Now get the dead leg data
query <- paste0("SELECT * FROM dead_leg_summary WHERE route_id = '", route,
"' AND quasi_block =", block, " AND service_id = '", service, "'")
dead_legs <- getDbData(query, conPool) %>% unique()
# Now the dead leg distance & time data
query <- paste0("SELECT DISTINCT dead_trip_unique_id, distance_km, time_hrs FROM dead_leg_shapes WHERE dead_trip_unique_id IN (",
paste0(sprintf("%s", unique(dead_legs$dead_leg_unique_id)), collapse = ', '), ")")
dead_leg_shapes <- getDbData(query, conPool)
# Now create dead leg stats for display as verbatim print output on UI
legs_df <- dead_legs %>%
left_join(dead_leg_shapes, by = c('dead_leg_unique_id' = 'dead_trip_unique_id')) %>%
mutate('id' = dead_leg_unique_id) %>%
select(id, start, end, route_id, quasi_block, distance_km, time_hrs) %>%
unique() %>%
mutate(distance_km = round(distance_km, 2)) %>%
mutate(time_hrs = round(time_hrs, 2))
# Now we need to add the dead leg distances to our distance vector (for plotting)
distance_vec <- c(0, legs_df$distance_km[legs_df$start == DEFAULT_DEPOT] * 1000,
tail(data$distance, (length(data$distance) - 1)),
legs_df$distance_km[legs_df$start != DEFAULT_DEPOT] * 1000)
# we now have all the distance data (route, dead trips & dead legs)
# Get the cumulative sum of distance & convert back to km
distance_vec <- cumsum(distance_vec) / 1000
# We now need a new time vector for the x-axis of our plot
# Bus will start at first stop time minus depot to start drive time
new_start <- head(data$time_axis, 1) - (legs_df$time_hrs[legs_df$start == DEFAULT_DEPOT] * 60 * 60)
# Bus will end at last stop time plus last stop to depot drive time
new_end <- tail(data$time_axis, 1) + (legs_df$time_hrs[legs_df$start != DEFAULT_DEPOT] * 60 * 60)
time_vec <- c(new_start, data$time_axis, new_end)
# Create a simple data frame for plotting
data_plot_add <- data.frame(
route_id = rep(route, length(distance_vec)),
service_id = rep(service, length(distance_vec)),
quasi_block = rep(block, length(distance_vec)),
trip_id = c(NA, data$trip_id, NA),
arrival_time = c(NA, data$arrival_time, format(tail(time_vec, 1), format = "%H:%M:%S")),
departure_time = c(format(head(time_vec, 1), format = "%H:%M:%S"), data$departure_time, NA),
stop = c(DEFAULT_DEPOT, data$stop_id, DEFAULT_DEPOT),
stop_headsign = c(NA, data$stop_headsign, NA),
distance_km = distance_vec,
block_length_km = max(distance_vec),
time_axis = time_vec,
direction = c(NA, data$direction_id, NA),
type = c('dead leg', data$type, 'dead leg')
)
# Count trips made using run length encoding function
trips_made <- rle(data_plot_add$trip_id)$values
# Remove NAs which will be the depot trips
trips_made <- trips_made[!is.na(trips_made)]
# Now summarize the bock as a single row
data_summary_add <- data.frame(
route_id = route,
service_id = service,
block = block,
num_trips = length(trips_made),
depot_start_time = format(head(time_vec, 1), format = "%H:%M:%S"),
trips_start_time = head(data$departure_time, 1),
trips_end_time = tail(data$arrival_time, 1),
depot_end_time = format(tail(time_vec, 1), format = "%H:%M:%S"),
start_depot = DEFAULT_DEPOT,
start_stop_id = head(data$stop_id, 1),
start_stop_name = stop_names$stop_name[stop_names$stop_id == head(data$stop_id, 1)],
last_stop_id = tail(data$stop_id, 1),
last_stop_name = stop_names$stop_name[stop_names$stop_id == tail(data$stop_id, 1)],
end_depot = DEFAULT_DEPOT,
block_length_km = round(max(distance_vec), 3)
)
# Now add stop names
data_plot_add <- data_plot_add %>%
left_join(stop_names, by = c('stop' = 'stop_id'))
# Add depot name as stop name for start and end
data_plot_add$stop_name[c(1, nrow(data_plot_add))] <- DEFAULT_DEPOT
# Bind with previous & move to next
data_plot <- rbind(data_plot, data_plot_add)
data_summary <- rbind(data_summary, data_summary_add)
}
}
}
mode <- ifelse(ind == 0, TRUE, FALSE)
# Save the plot_out data frame to the Azure SQL db
print('Saving data to database...')
saveByChunk(
chunk_size = 5000,
dat = data_plot,
table_name = 'distances',
connection_pool = conPool,
replace = mode
)
if(ind == 0) ind <- ind + 1
slice
slice[1] <- 273
slice[2] <- 276
print(paste0('Processing slice ', slice[1], ' to ', slice[2]))
routesVectorSlice <- routesVector[slice[1]:slice[2]]
data_plot <- data.frame()
for (route in routesVectorSlice){
print(paste0('Route ', which(routesVector %in% route), ' of ', length(routesVector)))
# Trips
tripsData <- getDbData(paste0("SELECT trip_id, service_id FROM trips WHERE route_id = '", route, "'"), conPool)
# Loop through for each service id
serviceVector <- unique(tripsData$service_id)
for (service in serviceVector){
print(paste0('Service ', which(serviceVector %in% service), ' of ', length(serviceVector)))
# Stops
query <- paste0("SELECT t.route_id, t.trip_id, t.service_id, s.arrival_time, s.departure_time,
s.stop_id, s.stop_headsign, s.shape_dist_traveled, t.direction_id
FROM trips t LEFT JOIN stop_times s ON t.trip_id = s.trip_id WHERE t.trip_id IN (",
paste0(sprintf("'%s'", unique(tripsData$trip_id)), collapse = ', '), ") AND t.service_id = '", service, "'")
stops <- getDbData(query, conPool) %>% arrange(trip_id)
if(nrow(stops) != 0){
# Ensure that trips are ordered correctly wrt to time
# some can be reversed, use run length encoding with rep function
run <- rle(stops$trip_id)
stops$trip_id_iter <- rep(sequence(length(run$values)), run$lengths)
stops <- stops %>%
mutate(departure_secs = toSeconds(departure_time)) %>%
arrange(trip_id_iter, departure_secs)
# Create quasi block number data based on departure time diffs
stops$quasi_block <- c(0, diff(toSeconds(stops$departure_time)))
# If diff is negative, it is not possible for the same bus to complete
# the trip, hence block assumed to terminate
stops$quasi_block <- ifelse(stops$quasi_block < 0, 1, 0)
bounds <- length(stops$quasi_block[stops$quasi_block == 1])
stops$quasi_block[stops$quasi_block == 1] <- (2:(bounds + 1))
stops$quasi_block[1] <- 1
# Now that block bounds have been identified, NA the infill values so
# that we can use the na last obs carry forward function to fill with
# the appropriate block number
stops$quasi_block <- ifelse(stops$quasi_block == 0, NA, stops$quasi_block)
stops$quasi_block <- zoo::na.locf(stops$quasi_block)
}
blockVector <- sort(unique(stops$quasi_block))
for (block in blockVector){
print(paste0('Block ', which(blockVector %in% block), ' of ', length(blockVector)))
# Blocks
data <- stops %>% filter(quasi_block == block)
# Prep data for time and distance modifications
# Some times could be greater than 24 hrs, e.g., 25:10:30
# Only times are provided, but days are required for (easier) plotting
# We need to add dead leg & trip distances to route distances & re-calc cumulative distance
data <- data %>%
mutate(time_secs = toSeconds(departure_time)) %>%
mutate(distance = shape_dist_traveled) %>%
mutate(time_axis = departure_time)
# Handling for times greater than 24 hrs, e.g., 28:30:00
# Start by giving all days a flag of 1 (first day)
data$day_flag <- 1
# Use regular expression to identify locations of times greater than 24 hr
high_times_loc <- grepl("^[2-9][4-9]:", data$departure_time)
# If there are times greater than 24 hrs, assign a new day flag, e.g., 2, 3, 4, n days
if (sum(high_times_loc) != 0){
high_times <- data$departure_time[high_times_loc]
high_times_hrs <- as.integer(substr(high_times, 1, 2))
day_count <- ceiling(max(high_times_hrs)) # round up to nearest day
# Iterate & add day flags
for (days in sequence(day_count)){
data$day_flag[data$time_secs > (days * 24 * 60 * 60)] <- (days + 1) # change flag for days greater than days x 24 hrs
}
}
# Now that day flags/markers are in place, we can re-base the hours
# e.g., convert 24:30:30 to 00:30:30
# Use regular expression to select & modify times/hrs greater than 24
mod_times <- c()
for (time in data$departure_time[grepl("^2[4-9]:", data$departure_time)]){
hr <- as.integer(substr(time, 1, 2))
hr <- hr - 24 # Rebase to 00
mod_times <- append(mod_times, gsub("^2[4-9]:", paste0(sprintf("%02d", hr), ':'), time))
}
# Now apply replace old times with mod times
data$departure_time[grepl("^2[4-9]:", data$departure_time)] <- mod_times
# Convert times to dummy day-time format for plot visualization
data <- data %>%
mutate(
time_axis = as.POSIXct(
paste0('2021-01-0', day_flag, ' ', departure_time),
format = "%Y-%m-%d %H:%M:%S", tz = 'UTC'
)
)
# Distances are cumulative, so get diff so we can calc a new
# cumulative distance that includes dead trip & leg distances
data$distance <- c(0, diff(data$distance))
# This will produce negative values at trip edges, put this to zero
data$distance[data$distance < 0] <- 0
# Create a file called type for easier filtering of data between route,
# dead trip & dead leg
data$type <- 'route'
# Grab stop analysis output
stop_analysis <- stop_analysis_out %>%
filter(route_id == route & service_id == service)
# Get dead trip details for selected route, service & block
deads <- stop_analysis %>%
filter(quasi_block == block) %>%
mutate(dead_trip_id = as.integer(dead_trip_id)) %>%
mutate(dead_trip_unique_id = as.integer(dead_trip_unique_id))
if (nrow(deads) != 0){
query <- paste0("SELECT DISTINCT dead_trip_unique_id, distance_km, time_hrs FROM dead_trip_shapes WHERE dead_trip_unique_id IN (",
paste0(sprintf("'%s'", unique(deads$dead_trip_unique_id)), collapse = ', '), ")")
dead_routes <- getDbData(query, conPool) %>% mutate(dead_trip_unique_id = as.integer(dead_trip_unique_id))
# Calculate the distance stats & join with stop analysis data for
# dead_start time so indices where dead route distances can be derived
dead_routes_stats <- dead_routes %>%
select(dead_trip_unique_id, distance_km, time_hrs) %>%
unique() %>%
left_join(deads, by = 'dead_trip_unique_id') %>%
select(dead_trip_unique_id, trip_first_stop_id, trip_last_stop_id, dead_start, distance_km, time_hrs, dead_time_hrs) %>%
# Ensure time order is correct for later insertion by index
mutate(dead_start_secs = toSeconds(dead_start)) %>%
arrange(dead_start_secs) %>%
select(-dead_start_secs)
# Now we need to add in the dead trip distances to our distance data
# Add 1 to indices as distance travelled is at available at the end of the trip
inds <- which(data$arrival_time %in% dead_routes_stats$dead_start) + 1
data$distance[inds] <- (dead_routes_stats$distance_km * 1000) # Convert from km to m for consistency
# Warning messages:
# 1: In data$distance[inds] <- (dead_routes_stats$distance_km * 1000) :
# number of items to replace is not a multiple of replacement length
# Tag as dead trips
data$type[inds] <- 'dead trip'
}
# Now get the dead leg data
query <- paste0("SELECT * FROM dead_leg_summary WHERE route_id = '", route,
"' AND quasi_block =", block, " AND service_id = '", service, "'")
dead_legs <- getDbData(query, conPool) %>% unique()
# Now the dead leg distance & time data
query <- paste0("SELECT DISTINCT dead_trip_unique_id, distance_km, time_hrs FROM dead_leg_shapes WHERE dead_trip_unique_id IN (",
paste0(sprintf("%s", unique(dead_legs$dead_leg_unique_id)), collapse = ', '), ")")
dead_leg_shapes <- getDbData(query, conPool)
# Now create dead leg stats for display as verbatim print output on UI
legs_df <- dead_legs %>%
left_join(dead_leg_shapes, by = c('dead_leg_unique_id' = 'dead_trip_unique_id')) %>%
mutate('id' = dead_leg_unique_id) %>%
select(id, start, end, route_id, quasi_block, distance_km, time_hrs) %>%
unique() %>%
mutate(distance_km = round(distance_km, 2)) %>%
mutate(time_hrs = round(time_hrs, 2))
# Now we need to add the dead leg distances to our distance vector (for plotting)
distance_vec <- c(0, legs_df$distance_km[legs_df$start == DEFAULT_DEPOT] * 1000,
tail(data$distance, (length(data$distance) - 1)),
legs_df$distance_km[legs_df$start != DEFAULT_DEPOT] * 1000)
# we now have all the distance data (route, dead trips & dead legs)
# Get the cumulative sum of distance & convert back to km
distance_vec <- cumsum(distance_vec) / 1000
# We now need a new time vector for the x-axis of our plot
# Bus will start at first stop time minus depot to start drive time
new_start <- head(data$time_axis, 1) - (legs_df$time_hrs[legs_df$start == DEFAULT_DEPOT] * 60 * 60)
# Bus will end at last stop time plus last stop to depot drive time
new_end <- tail(data$time_axis, 1) + (legs_df$time_hrs[legs_df$start != DEFAULT_DEPOT] * 60 * 60)
time_vec <- c(new_start, data$time_axis, new_end)
# Create a simple data frame for plotting
data_plot_add <- data.frame(
route_id = rep(route, length(distance_vec)),
service_id = rep(service, length(distance_vec)),
quasi_block = rep(block, length(distance_vec)),
trip_id = c(NA, data$trip_id, NA),
arrival_time = c(NA, data$arrival_time, format(tail(time_vec, 1), format = "%H:%M:%S")),
departure_time = c(format(head(time_vec, 1), format = "%H:%M:%S"), data$departure_time, NA),
stop = c(DEFAULT_DEPOT, data$stop_id, DEFAULT_DEPOT),
stop_headsign = c(NA, data$stop_headsign, NA),
distance_km = distance_vec,
block_length_km = max(distance_vec),
time_axis = time_vec,
direction = c(NA, data$direction_id, NA),
type = c('dead leg', data$type, 'dead leg')
)
# Count trips made using run length encoding function
trips_made <- rle(data_plot_add$trip_id)$values
# Remove NAs which will be the depot trips
trips_made <- trips_made[!is.na(trips_made)]
# Now summarize the bock as a single row
data_summary_add <- data.frame(
route_id = route,
service_id = service,
block = block,
num_trips = length(trips_made),
depot_start_time = format(head(time_vec, 1), format = "%H:%M:%S"),
trips_start_time = head(data$departure_time, 1),
trips_end_time = tail(data$arrival_time, 1),
depot_end_time = format(tail(time_vec, 1), format = "%H:%M:%S"),
start_depot = DEFAULT_DEPOT,
start_stop_id = head(data$stop_id, 1),
start_stop_name = stop_names$stop_name[stop_names$stop_id == head(data$stop_id, 1)],
last_stop_id = tail(data$stop_id, 1),
last_stop_name = stop_names$stop_name[stop_names$stop_id == tail(data$stop_id, 1)],
end_depot = DEFAULT_DEPOT,
block_length_km = round(max(distance_vec), 3)
)
# Now add stop names
data_plot_add <- data_plot_add %>%
left_join(stop_names, by = c('stop' = 'stop_id'))
# Add depot name as stop name for start and end
data_plot_add$stop_name[c(1, nrow(data_plot_add))] <- DEFAULT_DEPOT
# Bind with previous & move to next
data_plot <- rbind(data_plot, data_plot_add)
data_summary <- rbind(data_summary, data_summary_add)
}
}
}
mode <- ifelse(ind == 0, TRUE, FALSE)
# Save the plot_out data frame to the Azure SQL db
print('Saving data to database...')
saveByChunk(
chunk_size = 5000,
dat = data_plot,
table_name = 'distances',
connection_pool = conPool,
replace = mode
)
if(ind == 0) ind <- ind + 1
shiny::runApp('app')
bloc_summary
block_summary
data_plot
data_summary
# Save the summary info to the data base
# =======================================
# use saveByChunk function from db.R
saveByChunk(
chunk_size = 5000,
dat = data_summary,
table_name = 'block_summary',
connection_pool = conPool,
replace = TRUE
)
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
version
runApp('app')
shiny::runApp('app')
